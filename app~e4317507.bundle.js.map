{"version":3,"file":"app~e4317507.bundle.js","mappings":";gKAWA,QAPe,CACb,IAAKA,EAAAA,EACL,QAASA,EAAAA,EACT,cAAeC,EAAAA,EACf,YAAaC,EAAAA,mCCkBf,QA1BkB,CAChBC,2BAA0B,WACxB,IAAMC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cACpCC,EAAaC,KAAKC,YAAYR,GACpC,OAAOO,KAAKE,YAAYH,EAC1B,EAEAI,8BAA6B,WAC3B,IAAMV,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cAC1C,OAAOE,KAAKC,YAAYR,EAC1B,EAEAQ,YAAW,SAACR,GACV,IAAMW,EAAaX,EAAIY,MAAM,KAC7B,MAAO,CACLC,SAAUF,EAAW,IAAM,KAC3BG,GAAIH,EAAW,IAAM,KAEzB,EAEAF,YAAW,SAACH,GACV,OAAQA,EAAWO,SAAW,IAAH,OAAOP,EAAWO,UAAa,MACrDP,EAAWQ,GAAK,OAAS,GAChC,4SCtBF,gnGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBA8CA,QA5CgC,CACxBC,KAAI,YAA0C,oHAErB,OAFlBC,EAAuB,EAAvBA,wBAAyBC,EAAU,EAAVA,WACpC,EAAKD,wBAA0BA,EAC/B,EAAKC,WAAaA,EAAW,SAEvB,EAAKC,eAAc,0CAJyB,EAKpD,EAEMA,aAAY,WAAG,kHACT,OAAFL,EAAO,EAAKI,WAAZJ,GAAE,SAEA,EAAKM,kBAAkBN,GAAG,kCAClC,EAAKO,kBAAkB,sBAEvB,EAAKC,iBAAiB,0CANL,EAQrB,EAEMF,kBAAiB,SAACN,GAAI,uHACJS,EAAAA,EAAAA,IAAkBT,GAAG,OAA9B,OAAPU,EAAU,EAAH,yBACJA,GAAO,0CAFU,EAG5B,EAEAF,eAAc,WAAG,WACff,KAAKU,wBAAwBQ,WAAYC,EAAAA,EAAAA,MAElBC,SAASC,cAAc,mBAC/BC,iBAAiB,QAAO,YAAE,8FACjCN,EAAAA,EAAAA,IAAkB,EAAKL,YAAW,OACxC,EAAKC,eAAe,2CAExB,EAEAE,gBAAe,WAAG,WAChBd,KAAKU,wBAAwBQ,WAAYK,EAAAA,EAAAA,MAElBH,SAASC,cAAc,mBAC/BC,iBAAiB,QAAO,YAAE,8FACjCN,EAAAA,EAAAA,OAAqB,EAAKL,WAAWJ,IAAG,OAC9C,EAAKK,eAAe,2CAExB,mSC3CF,gnGAAAJ,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+XAiBA,QAfgB,eAFhB,EAEgB,GAFhB,EAEgB,UAAG,uFACX,kBAAmBgB,UAAS,gBAC2B,OAA3DC,QAAQC,IAAI,+CAA+C,0BAIP,OAAhDC,EAAK,IAAIC,EAAAA,GAAsB,kBAAiB,kBAE9CD,EAAGE,WAAU,OACnBJ,QAAQC,IAAI,6BAA6B,kDAEzCD,QAAQC,IAAI,oCAAqC,EAAF,IAAS,yDAb5D,+KAeC,kBAbe","sources":["webpack://restaurant-apps/./src/scripts/routes/routes.js","webpack://restaurant-apps/./src/scripts/routes/url-parser.js","webpack://restaurant-apps/./src/scripts/utils/favorite-button-initiator.js","webpack://restaurant-apps/./src/scripts/utils/sw-register.js"],"sourcesContent":["import favorite from '../views/pages/favorite';\nimport list from '../views/pages/list';\nimport Detail from '../views/pages/detail';\n\nconst routes = {\n  '/': list,\n  '/home': list,\n  '/detail/:id': Detail,\n  '/favorite': favorite,\n};\n\nexport default routes;\n","const UrlParser = {\n  parseActiveUrlWithCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    const splitedUrl = this.urlSplitter(url);\n    return this.urlCombiner(splitedUrl);\n  },\n\n  parseActiveUrlWithoutCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    return this.urlSplitter(url);\n  },\n\n  urlSplitter(url) {\n    const urlsSplits = url.split('/');\n    return {\n      resource: urlsSplits[1] || null,\n      id: urlsSplits[2] || null,\n    };\n  },\n\n  urlCombiner(splitedUrl) {\n    return (splitedUrl.resource ? `/${splitedUrl.resource}` : '/')\n      + (splitedUrl.id ? '/:id' : '');\n  },\n};\n\nexport default UrlParser;\n","import { createfavoriteButtonTemplate, createfavoritedButtonTemplate } from '../views/templates/template-creator';\nimport restaurantIdb from '../data/local';\n\nconst FavoriteButtonInitiator = {\n  async init({ favoriteButtonContainer, restaurant }) {\n    this.favoriteButtonContainer = favoriteButtonContainer;\n    this.restaurant = restaurant;\n\n    await this.renderButton();\n  },\n\n  async renderButton() {\n    const { id } = this.restaurant;\n\n    if (await this.isRestaurantExist(id)) {\n      this.renderfavorited();\n    } else {\n      this.renderfavorite();\n    }\n  },\n\n  async isRestaurantExist(id) {\n    const isExist = await restaurantIdb.get(id);\n    return !!isExist;\n  },\n\n  renderfavorite() {\n    this.favoriteButtonContainer.innerHTML = createfavoriteButtonTemplate();\n\n    const favoriteButton = document.querySelector('#favoriteButton');\n    favoriteButton.addEventListener('click', async () => {\n      await restaurantIdb.put(this.restaurant);\n      this.renderButton();\n    });\n  },\n\n  renderfavorited() {\n    this.favoriteButtonContainer.innerHTML = createfavoritedButtonTemplate();\n\n    const favoriteButton = document.querySelector('#favoriteButton');\n    favoriteButton.addEventListener('click', async () => {\n      await restaurantIdb.delete(this.restaurant.id);\n      this.renderButton();\n    });\n  },\n};\n\nexport default FavoriteButtonInitiator;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as WorkboxWindow from 'workbox-window';\n\nconst swRegister = async () => {\n  if (!('serviceWorker' in navigator)) {\n    console.log('Service Worker not supported in the browser');\n    return;\n  }\n\n  const wb = new WorkboxWindow.Workbox('./sw.bundle.js');\n  try {\n    await wb.register();\n    console.log('Service worker registered');\n  } catch (error) {\n    console.log('Failed to register service worker', error);\n  }\n};\n\nexport default swRegister;\n"],"names":["list","Detail","favorite","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","urlSplitter","urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","i","init","favoriteButtonContainer","restaurant","renderButton","isRestaurantExist","renderfavorited","renderfavorite","restaurantIdb","isExist","innerHTML","createfavoriteButtonTemplate","document","querySelector","addEventListener","createfavoritedButtonTemplate","navigator","console","log","wb","WorkboxWindow","register"],"sourceRoot":""}